
@inproceedings{kirubakaran_mobile_2013,
	title = {Mobile application testing — Challenges and solution approach through automation},
	url = {https://ieeexplore.ieee.org/document/6496451/},
	doi = {10.1109/ICPRIME.2013.6496451},
	abstract = {By the time this paper has been presented, the mobile app landscape will have changed. New {OS} versions will have been released. A bunch of new devices will have hit the market. And mobile application testing will have become that much more complex and challenging for all of us. There is no doubt that mobile applications need specific testing approaches. This paper wants to investigate new directions in research on the type of testing and skills required on mobile app testing by answering the following three research questions: ({RQ}1) How mobile applications testing are so different from traditional web applications, that require specialized testing skills and techniques?, ({RQ}2) What are the new challenges and future trends in mobile application testing, and ({RQ}3) How far automation effective in testing mobile application?. We answer those questions by analyzing the current trends in mobile application development and testing, and by proposing my view on the topic.},
	eventtitle = {2013 International Conference on Pattern Recognition, Informatics and Mobile Engineering},
	pages = {79--84},
	booktitle = {2013 International Conference on Pattern Recognition, Informatics and Mobile Engineering},
	author = {Kirubakaran, B. and Karthikeyani, V.},
	date = {2013-02},
	keywords = {automation, Automation, mobile applications, Mobile communication, Mobile computing, Performance evaluation, Smart phones, software testing, Testing},
}

@inproceedings{liu_automatic_2017,
	location = {Buenos Aires},
	title = {Automatic Text Input Generation for Mobile Testing},
	isbn = {978-1-5386-3868-2},
	url = {http://ieeexplore.ieee.org/document/7985701/},
	doi = {10.1109/ICSE.2017.65},
	eventtitle = {2017 {IEEE}/{ACM} 39th International Conference on Software Engineering ({ICSE})},
	pages = {643--653},
	booktitle = {2017 {IEEE}/{ACM} 39th International Conference on Software Engineering ({ICSE})},
	publisher = {{IEEE}},
	author = {Liu, Peng and Zhang, Xiangyu and Pistoia, Marco and Zheng, Yunhui and Marques, Manoel and Zeng, Lingfei},
	date = {2017-05},
	keywords = {Predictive models, Mobile communication, Testing, Biological neural networks, Context modeling, Neurons, Training},
}

@inproceedings{bernardo_silva_analysis_2016,
	location = {Valparaíso, Chile},
	title = {An analysis of automated tests for mobile Android applications},
	isbn = {978-1-5090-1633-4},
	url = {http://ieeexplore.ieee.org/document/7833334/},
	doi = {10.1109/CLEI.2016.7833334},
	eventtitle = {2016 {XLII} Latin American Computing Conference ({CLEI})},
	pages = {1--9},
	booktitle = {2016 {XLII} Latin American Computing Conference ({CLEI})},
	publisher = {{IEEE}},
	author = {Bernardo Silva, Davi and Endo, Andre Takeshi and Eler, Marcelo Medeiros and Durelli, Vinicius H. S.},
	date = {2016-10},
	langid = {american},
	keywords = {Mobile communication, Smart phones, Testing, Android, Androids, Humanoid robots, Mobile applications, Mobile Computing, Open Source, Software Testing},
}

@article{liang_context_nodate,
	title = {Context Virtualizer: A Cloud Service for Automated Large-scale Mobile App Testing under Real-World Conditions},
	author = {Liang, Mike Chieh-Jan and Lane, Nicholas D and Brouwers, Niels and Zhang, Li Lyna and Karlsson, Börje F and Liu, Hao and Liu, Yan and Tang, Jun and Shan, Xiang and Chandra, Ranveer and Zhao, Feng},
	langid = {english},
}

@inproceedings{adamsen_systematic_2015,
	location = {Baltimore {MD} {USA}},
	title = {Systematic execution of Android test suites in adverse conditions},
	isbn = {978-1-4503-3620-8},
	url = {https://dl.acm.org/doi/10.1145/2771783.2771786},
	doi = {10.1145/2771783.2771786},
	abstract = {Event-driven applications, such as, mobile apps, are diﬃcult to test thoroughly. The application programmers often put signiﬁcant eﬀort into writing end-to-end test suites. Even though such tests often have high coverage of the source code, we ﬁnd that they often focus on the expected behavior, not on occurrences of unusual events. On the other hand, automated testing tools may be capable of exploring the state space more systematically, but this is mostly without knowledge of the intended behavior of the individual applications. As a consequence, many programming errors remain unnoticed until they are encountered by the users.},
	eventtitle = {{ISSTA} '15: International Symposium on Software Testing and Analysis},
	pages = {83--93},
	booktitle = {Proceedings of the 2015 International Symposium on Software Testing and Analysis},
	publisher = {{ACM}},
	author = {Adamsen, Christoffer Quist and Mezzetti, Gianluca and Møller, Anders},
	date = {2015-07-13},
	langid = {english},
}

@inproceedings{jensen_automated_2013,
	location = {Lugano Switzerland},
	title = {Automated testing with targeted event sequence generation},
	isbn = {978-1-4503-2159-4},
	url = {https://dl.acm.org/doi/10.1145/2483760.2483777},
	doi = {10.1145/2483760.2483777},
	abstract = {Automated software testing aims to detect errors by producing test inputs that cover as much of the application source code as possible. Applications for mobile devices are typically event-driven, which raises the challenge of automatically producing event sequences that result in high coverage. Some existing approaches use random or model-based testing that largely treats the application as a black box. Other approaches use symbolic execution, either starting from the entry points of the applications or on speciﬁc event sequences. A common limitation of the existing approaches is that they often fail to reach the parts of the application code that require more complex event sequences.},
	eventtitle = {{ISSTA} '13: Iitsnternational Symposium on Software Testing and Analysis},
	pages = {67--77},
	booktitle = {Proceedings of the 2013 International Symposium on Software Testing and Analysis},
	publisher = {{ACM}},
	author = {Jensen, Casper S. and Prasad, Mukul R. and Møller, Anders},
	date = {2013-07-15},
	langid = {english},
}

@article{tao_building_2016,
	title = {Building a Model-Based {GUI} Test Automation System for Mobile Applications},
	volume = {26},
	issn = {0218-1940, 1793-6403},
	url = {https://www.worldscientific.com/doi/abs/10.1142/S0218194016710042},
	doi = {10.1142/S0218194016710042},
	abstract = {With the rapid advance of mobile computing technology and wireless networking, there is a significant increase of mobile applications (apps). This brings new business requirements and demands in mobile software testing, and causes new issues and challenges in mobile test automation. Existing mobile application testing approaches mostly concentrate on {GUI}-based testing, load and performance testing without considering large-scale concurrent mobile app test automation, and model-based test coverage analysis. In this paper, a mobile hierarchical {GUI} model is proposed to present mobile operation scenario flows and gesture features in a hierarchical manner, in order to facilitate test dependency analysis in test automation. Mobile app test coverage analysis is performed based on {GUI} ripping models. The paper also presents a developed system that provides a test automation solution using {GUI} models. Finally, the paper reports a case study to indicate the feasibility and effectiveness of the proposed approach.},
	pages = {1605--1615},
	number = {9},
	journaltitle = {International Journal of Software Engineering and Knowledge Engineering},
	shortjournal = {Int. J. Soft. Eng. Knowl. Eng.},
	author = {Tao, Chuanqi and Gao, Jerry},
	date = {2016-11},
	langid = {english},
}

@incollection{amalfitano_testing_2013,
	title = {Testing Android Mobile Applications: Challenges, Strategies, and Approaches},
	volume = {89},
	isbn = {978-0-12-408094-2},
	url = {https://linkinghub.elsevier.com/retrieve/pii/B9780124080942000011},
	shorttitle = {Testing Android Mobile Applications},
	pages = {1--52},
	booktitle = {Advances in Computers},
	publisher = {Elsevier},
	author = {Amalfitano, Domenico and Fasolino, Anna Rita and Tramontana, Porfirio and Robbins, Bryan},
	date = {2013},
	langid = {english},
	doi = {10.1016/B978-0-12-408094-2.00001-1},
}

@inproceedings{linares-vasquez_continuous_2017,
	location = {Shanghai},
	title = {Continuous, Evolutionary and Large-Scale: A New Perspective for Automated Mobile App Testing},
	isbn = {978-1-5386-0992-7},
	url = {http://ieeexplore.ieee.org/document/8094439/},
	doi = {10.1109/ICSME.2017.27},
	shorttitle = {Continuous, Evolutionary and Large-Scale},
	eventtitle = {2017 {IEEE} International Conference on Software Maintenance and Evolution ({ICSME})},
	pages = {399--410},
	booktitle = {2017 {IEEE} International Conference on Software Maintenance and Evolution ({ICSME})},
	publisher = {{IEEE}},
	author = {Linares-Vasquez, Mario and Moran, Kevin and Poshyvanyk, Denys},
	date = {2017-09},
}

@inproceedings{karlsson_model-based_2021,
	location = {Porto de Galinhas, Brazil},
	title = {Model-based Automated Testing of Mobile Applications: An Industrial Case Study},
	rights = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/{IEEE}.html},
	isbn = {978-1-6654-4456-9},
	url = {https://ieeexplore.ieee.org/document/9440191/},
	doi = {10.1109/ICSTW52544.2021.00033},
	shorttitle = {Model-based Automated Testing of Mobile Applications},
	eventtitle = {2021 {IEEE} International Conference on Software Testing, Verification and Validation Workshops ({ICSTW})},
	pages = {130--137},
	booktitle = {2021 {IEEE} International Conference on Software Testing, Verification and Validation Workshops ({ICSTW})},
	publisher = {{IEEE}},
	author = {Karlsson, Stefan and Causevic, Adnan and Sundmark, Daniel and Larsson, Marten},
	date = {2021-04},
}

@article{vinaysimha_varma_yadavali_advancing_2024,
	title = {Advancing Element Identification for Web and Mobile Automation},
	issn = {2581-9429},
	url = {https://ijarsct.co.in/Paper6232.pdf},
	doi = {10.48175/IJARSCT-6232},
	abstract = {Element identification is a cornerstone of automation testing, directly influencing the reliability, scalability, and efficiency of test scripts. With the rapid evolution of web and mobile applications, traditional element identification methods—such as {XPath}, {CSS} Selectors, and static attributes—are increasingly challenged by dynamic {DOM} structures, shadow {DOMs}, virtual {DOMs}, and hybrid frameworks. These challenges are further amplified in mobile environments, where gestures, native elements, and platform-specific attributes add layers of complexity.
This paper explores the advancements in element identification techniques that address these challenges for both web and mobile automation testing. It presents a comparative analysis of traditional methods and emerging solutions, highlighting their limitations in modern application scenarios. The study introduces hybrid strategies, including context-aware locators, heuristic-based identification, and early implementations of adaptive and self-healing locators. It also examines the role of cross-platform tools like Selenium, Appium, and Cypress in tackling identification issues.
Furthermore, the paper emphasizes the importance of unified approaches that bridge web and mobile testing, particularly in hybrid applications with embedded web views. Future trends, such as collaborative tagging standards between development and testing teams, are discussed to provide a forward-looking perspective on overcoming element identification bottlenecks.
By addressing key pain points and proposing innovative techniques, this paper aims to guide testers, developers, and tool creators in adopting resilient, scalable, and adaptable element identification strategies that meet the demands of modern software applications.},
	pages = {45--56},
	journaltitle = {International Journal of Advanced Research in Science, Communication and Technology},
	shortjournal = {{IJARSCT}},
	author = {{Vinaysimha Varma Yadavali}},
	date = {2024-08-30},
	langid = {english},
}

@online{grand_view_research_mobile_2025,
	title = {Mobile Application Market Size, Share \& Growth Report 2030},
	url = {https://www.grandviewresearch.com/industry-analysis/mobile-application-market/segmentation},
	abstract = {The global mobile application market size was valued at {USD} 252.89 billion in 2023 and is projected to grow at a {CAGR} of 14.3\% from 2024 to 2030.},
	author = {{Grand View Research}},
	langid = {english},
	date = {2025-01},
	year = {2025},
}
@article{SymbianOS2025,
  title = {Symbian {{OS}}},
  year = {2025},
  month = may,
  journal = {Wikipedia},
  abstract = {Symbian is a discontinued mobile operating system (OS) and computing platform designed for smartphones. It was originally developed as a proprietary software OS for personal digital assistants in 1998 by the Symbian Ltd. consortium. Symbian OS is a descendant of Psion's EPOC, and was released exclusively on ARM processors, although an unreleased x86 port existed. Symbian was used by many major mobile phone brands, like Samsung, Motorola, Sony Ericsson, and above all by Nokia. It was also prevalent in Japan by brands including Fujitsu, Sharp and Mitsubishi. As a pioneer that established the smartphone industry, it was the most popular smartphone OS on a worldwide average until the end of 2010, at a time when smartphones were in limited use, when it was overtaken by iOS and Android. It was notably less popular in North America. The Symbian OS platform is formed of two components: one being the microkernel-based operating system with its associated libraries, and the other being the user interface (as middleware), which provides the graphical shell atop the OS. The most prominent user interface was the S60 (formerly Series 60) platform built by Nokia, first released in 2002 and powering most Nokia Symbian devices. UIQ was a competing user interface mostly used by Motorola and Sony Ericsson that focused on pen-based devices, rather than a traditional keyboard interface from S60. Another interface was the MOAP(S) platform from carrier NTT DoCoMo in the Japanese market. Applications for these different interfaces were not compatible with each other, despite each being built atop Symbian OS. Nokia became the largest shareholder of Symbian Ltd. in 2004 and purchased the entire company in 2008. The non-profit Symbian Foundation was then created to make a royalty-free successor to Symbian OS. Seeking to unify the platform, S60 became the Foundation's favoured interface and UIQ stopped development. The touchscreen-focused Symbian{\textasciicircum}1 (or S60 5th Edition) was created as a result in 2009. Symbian{\textasciicircum}2 (based on MOAP) was used by NTT DoCoMo, one of the members of the Foundation, for the Japanese market. Symbian{\textasciicircum}3 was released in 2010 as the successor to S60 5th Edition, by which time it became fully free software. The transition from a proprietary operating system to a free software project is believed to be one of the largest in history. Symbian{\textasciicircum}3 received the Anna and Belle updates in 2011. The Symbian Foundation disintegrated in late 2010 and Nokia took back control of the OS development. In February 2011, Nokia, by then the only remaining company still supporting Symbian outside Japan, announced that it would use Microsoft's Windows Phone 7 as its primary smartphone platform, while Symbian would be gradually wound down. Two months later, Nokia moved the OS to proprietary licensing, only collaborating with the Japanese OEMs and later outsourced Symbian development to Accenture. Although support was promised until 2016, including two major planned updates, by 2012 Nokia had mostly abandoned development and most Symbian developers had already left Accenture, and in January 2014 Nokia stopped accepting new or changed Symbian software from developers. The Nokia 808 PureView in 2012 was officially the last Symbian smartphone from Nokia. NTT DoCoMo continued releasing OPP(S) (Operator Pack Symbian, successor of MOAP) devices in Japan, which still act as middleware on top of Symbian. Phones running this include the F-07F from Fujitsu and SH-07F from Sharp in 2014.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1288336212},
  url= {https://en.wikipedia.org/w/index.php?title=Symbian&oldid=1288336212},
}
@article{WindowsPhone2025,
  title = {Windows {{Phone}}},
  year = {2025},
  month = apr,
  journal = {Wikipedia},
  abstract = {Windows Phone (WP) is a discontinued mobile operating system developed by Microsoft Mobile for smartphones as the replacement successor to Windows Mobile and Zune. Windows Phone featured a new user interface derived from the Metro design language. Unlike Windows Mobile, it was primarily aimed at the consumer market rather than the enterprise market. It was first launched in October 2010 with Windows Phone 7. Windows Phone 8 succeeded it in 2012, replacing the Windows CE-based kernel of Windows Phone 7 with the Windows NT kernel used by the PC versions of Windows (and, in particular, a large amount of internal components from Windows 8). Due to these changes, the OS was incompatible with all existing Windows Phone 7 devices, although it still supported apps originally developed for Windows Phone 7. In 2014, Microsoft released the Windows Phone 8.1 update, which introduced the Cortana virtual assistant, and Windows Runtime platform support to create cross-platform apps between Windows PCs and Windows Phone. In 2015, Microsoft released Windows 10 Mobile, which promoted increased integration and unification with its PC counterpart, including the ability to connect devices to an external display or docking station to display a PC-like interface. Although Microsoft dropped the Windows Phone brand at this time in order to focus more on synergies with Windows 10 for PCs, it was still a continuation of the Windows Phone line from a technical standpoint, and updates were issued for selected Windows Phone 8.1 devices. While Microsoft's investments in the platform were headlined by a major partnership with Nokia (whose Lumia series of smartphones, including the Lumia 520 in particular, would represent the majority of Windows Phone devices sold by 2013) and Microsoft's eventual acquisition of the company's mobile device business for just over US\$7 billion (which included Nokia's then-CEO Stephen Elop joining Microsoft to lead its in-house mobile division), the duopoly of Android and iPhone remained the dominant platforms for smartphones, and interest in Windows Phone from app developers began to diminish by mid-decade. Microsoft laid off the Microsoft Mobile staff in 2016, after having taken a write-off of \$7.6 billion on the acquired Nokia hardware assets, while market share sank to 1\% that year. Microsoft began to prioritize software development and integrations with Android and iOS instead, and ceased active development of Windows 10 Mobile in 2017.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1286569954},
  url={https://en.wikipedia.org/w/index.php?title=Windows_Phone&oldid=1286569954},
}
@article{AndroidOperatingSystem2025,
  title = {Android (Operating System)},
  year = {2025},
  month = may,
  journal = {Wikipedia},
  abstract = {Android is an operating system based on a modified version of the Linux kernel and other open-source software, designed primarily for touchscreen-based mobile devices such as smartphones and tablets. Android has historically been developed by a consortium of developers known as the Open Handset Alliance, but its most widely used version is primarily developed by Google. First released in 2008, Android is the world's most widely used operating system; the latest version, released on October 15, 2024, is Android 15. At its core, the operating system is known as the Android Open Source Project (AOSP) and is free and open-source software (FOSS) primarily licensed under the Apache License. However, most devices run the proprietary Android version developed by Google, which ships with additional proprietary closed-source software pre-installed, most notably Google Mobile Services (GMS), which includes core apps such as Google Chrome, the digital distribution platform Google Play, and the associated Google Play Services development platform. Firebase Cloud Messaging is used for push notifications. While AOSP is free, the "Android" name and logo are trademarks of Google, who restrict the use of Android branding on "uncertified" products. The majority of smartphones based on AOSP run Google's ecosystem---which is known simply as Android---some with vendor-customized user interfaces and software suites, for example One UI. Numerous modified distributions exist, which include competing Amazon Fire OS, community-developed LineageOS; the source code has also been used to develop a variety of Android distributions on a range of other electronics, such as Android TV for televisions, Wear OS for wearables, and Meta Horizon OS for VR headsets.  Software packages on Android, which use the APK format, are generally distributed through a proprietary application store; non-Google platforms include vendor-specific Amazon Appstore, Samsung Galaxy Store, Huawei AppGallery, and third-party companies Aptoide, Cafe Bazaar, GetJar or open source F-Droid. Since 2011 Android has been the most used operating system worldwide on smartphones. It has the largest installed base of any operating system in the world with over three billion monthly active users and accounting for 46\% of the global operating system market.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1288461632},
  url={https://en.wikipedia.org/w/index.php?title=Android_(operating_system)&oldid=1288461632},
}
@article{IOS2025,
  title = {{{iOS}}},
  year = {2025},
  month = apr,
  journal = {Wikipedia},
  abstract = {iOS (formerly iPhone OS) is a mobile operating system developed by Apple exclusively for its mobile devices. It was unveiled in January 2007 for the first-generation iPhone, which launched in June 2007. Major versions of iOS are released annually; the current stable version, iOS 18, was released to the public on September 16, 2024. Besides powering iPhone, iOS is the basis for three other operating systems made by Apple: iPadOS, tvOS, and watchOS. iOS formerly also powered iPads until iPadOS was introduced in 2019 and the iPod Touch line of devices until its discontinuation. iOS is the world's second most widely installed mobile operating system, after Android. As of December 2023, Apple's App Store contains more than 3.8 million iOS mobile apps. iOS is based on macOS. Like macOS, it includes components of the Mach microkernel and FreeBSD. It is a Unix-like operating system. Although some parts of iOS are open source under the Apple Public Source License and other licenses, iOS is proprietary software.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1286015929},
  url={https://en.wikipedia.org/w/index.php?title=iOS&oldid=1286015929},
}
@inproceedings{joorabchiRealChallengesMobile2013,
  title = {Real {{Challenges}} in {{Mobile App Development}}},
  booktitle = {2013 {{ACM}} / {{IEEE International Symposium}} on {{Empirical Software Engineering}} and {{Measurement}}},
  author = {Joorabchi, Mona Erfani and Mesbah, Ali and Kruchten, Philippe},
  year = {2013},
  month = oct,
  pages = {15--24},
  publisher = {IEEE},
  address = {Baltimore, Maryland},
  doi = {10.1109/ESEM.2013.9},
  url = {http://ieeexplore.ieee.org/document/6681334/},
  urldate = {2025-05-06},
  isbn = {978-0-7695-5056-5}
}
@inproceedings{adamsenSystematicExecutionAndroid2015,
  title = {Systematic Execution of {{Android}} Test Suites in Adverse Conditions},
  booktitle = {Proceedings of the 2015 {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Adamsen, Christoffer Quist and Mezzetti, Gianluca and M{\o}ller, Anders},
  year = {2015},
  month = jul,
  pages = {83--93},
  publisher = {ACM},
  address = {Baltimore MD USA},
  doi = {10.1145/2771783.2771786},
  url = {https://dl.acm.org/doi/10.1145/2771783.2771786},
  urldate = {2025-04-24},
  abstract = {Event-driven applications, such as, mobile apps, are difficult to test thoroughly. The application programmers often put significant effort into writing end-to-end test suites. Even though such tests often have high coverage of the source code, we find that they often focus on the expected behavior, not on occurrences of unusual events. On the other hand, automated testing tools may be capable of exploring the state space more systematically, but this is mostly without knowledge of the intended behavior of the individual applications. As a consequence, many programming errors remain unnoticed until they are encountered by the users.},
  isbn = {978-1-4503-3620-8},
  langid = {english}
}

@incollection{amalfitanoTestingAndroidMobile2013,
  title = {Testing {{Android Mobile Applications}}: {{Challenges}}, {{Strategies}}, and {{Approaches}}},
  shorttitle = {Testing {{Android Mobile Applications}}},
  booktitle = {Advances in {{Computers}}},
  author = {Amalfitano, Domenico and Fasolino, Anna Rita and Tramontana, Porfirio and Robbins, Bryan},
  year = {2013},
  volume = {89},
  pages = {1--52},
  publisher = {Elsevier},
  doi = {10.1016/B978-0-12-408094-2.00001-1},
  url = {https://linkinghub.elsevier.com/retrieve/pii/B9780124080942000011},
  urldate = {2025-04-24},
  isbn = {978-0-12-408094-2},
  langid = {english}
}

@inproceedings{bernardosilvaAnalysisAutomatedTests2016,
  title = {An Analysis of Automated Tests for Mobile {{Android}} Applications},
  booktitle = {2016 {{XLII Latin American Computing Conference}} ({{CLEI}})},
  author = {Bernardo Silva, Davi and Endo, Andre Takeshi and Eler, Marcelo Medeiros and Durelli, Vinicius H. S.},
  year = {2016},
  month = oct,
  pages = {1--9},
  publisher = {IEEE},
  address = {Valpara{\'i}so, Chile},
  doi = {10.1109/CLEI.2016.7833334},
  url = {http://ieeexplore.ieee.org/document/7833334/},
  urldate = {2025-04-24},
  isbn = {978-1-5090-1633-4},
  langid = {american},
  keywords = {Android,Androids,Humanoid robots,Mobile applications,Mobile communication,Mobile Computing,Open Source,Smart phones,Software Testing,Testing}
}

@misc{BestAutomationMobile,
  title = {Best {{Automation Mobile Testing Tools}} and {{Frameworks}}},
  journal = {BrowserStack},
  url = {https://browserstack.wpengine.com/guide/mobile-application-testing-frameworks/},
  urldate = {2025-05-11},
  abstract = {Discover the best mobile automation testing tools and frameworks to ensure fast, reliable, and scalable testing for iOS and Android applications.},
  langid = {american}
}

@misc{facemireBreathtakingFutureSoftware2015,
  title = {The {{Breathtaking Future}} of {{Software Development}} -- {{It}}'s {{Already Here}}!},
  author = {Facemire, Michael},
  year = {2015},
  month = sep,
  journal = {Forrester},
  url = {https://www.forrester.com/blogs/the-breathtaking-future-of-software-development-its-already-here/},
  urldate = {2025-05-11},
  abstract = {"The future is already here --- it's just not very evenly distributed" --- William Gibson I recently drove a Tesla for the first time. As a kid that grew up in a car dealership (my father and grandfather both owned one) I grew up with a love of cars, speed, and pushing limits. Driving that [{\dots}]},
  langid = {american}
}

@misc{facemireDevelopmentEnterpriseMobile2013,
  title = {Development {{In The Enterprise}}: {{The Mobile Path Is Clear And Getting Easier}}!},
  shorttitle = {Development {{In The Enterprise}}},
  author = {Facemire, Michael},
  year = {2013},
  month = apr,
  journal = {Forrester},
  url = {https://www.forrester.com/blogs/13-04-22-development_in_the_enterprise_the_mobile_path_is_clear_and_getting_easier/},
  urldate = {2025-05-11},
  abstract = {I stated a few months ago that ``data is the new currency'' and that ``the API layer will be the core around which every successful enterprise digital strategy is based.'' Fast-forward to today: two moves this week prove that Intel and CA Technologies agree and are betting heavily on this strategy with acquisitions of Mashery [{\dots}]},
  langid = {american}
}

@misc{facemireMobilesNextEra2013,
  title = {Mobile's {{Next Era}}: {{Not Apps}}, {{Not Websites}} --- {{Experiences}}!},
  shorttitle = {Mobile's {{Next Era}}},
  author = {Facemire, Michael},
  year = {2013},
  month = feb,
  journal = {Forrester},
  url = {https://www.forrester.com/blogs/mobiles-next-era-not-apps-not-websites-experiences/},
  urldate = {2025-05-11},
  abstract = {I was fortunate this week to attend a presentation by James Whittaker in which he delivered his view on the next era of computing. This was one of the best presentations I've seen, because the content was presented in a compelling manner that created an outstanding overall experience. I point this out because it parallels [{\dots}]},
  langid = {american}
}

@misc{FunctionalTesting,
  title = {Functional {{Testing}}},
  journal = {Tricentis},
  url = {https://www.tricentis.com/learn/functional-testing/},
  urldate = {2025-05-11},
  abstract = {In software development, functional testing is performed to ensure that software works correctly. Read about the types of functional testing and more.},
  langid = {american}
}

@misc{grandviewresearchMobileApplicationMarket,
  title = {Mobile {{Application Market Size}}, {{Share}} \& {{Growth Report}} 2030},
  author = {{Grand View Research}},
  url = {https://www.grandviewresearch.com/industry-analysis/mobile-application-market/segmentation},
  urldate = {2025-05-06},
  abstract = {The global mobile application market size was valued at USD 252.89 billion in 2023 and is projected to grow at a CAGR of 14.3\% from 2024 to 2030.},
  langid = {english}
}

@inproceedings{jensenAutomatedTestingTargeted2013,
  title = {Automated Testing with Targeted Event Sequence Generation},
  booktitle = {Proceedings of the 2013 {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Jensen, Casper S. and Prasad, Mukul R. and M{\o}ller, Anders},
  year = {2013},
  month = jul,
  pages = {67--77},
  publisher = {ACM},
  address = {Lugano Switzerland},
  doi = {10.1145/2483760.2483777},
  url = {https://dl.acm.org/doi/10.1145/2483760.2483777},
  urldate = {2025-04-24},
  abstract = {Automated software testing aims to detect errors by producing test inputs that cover as much of the application source code as possible. Applications for mobile devices are typically event-driven, which raises the challenge of automatically producing event sequences that result in high coverage. Some existing approaches use random or model-based testing that largely treats the application as a black box. Other approaches use symbolic execution, either starting from the entry points of the applications or on specific event sequences. A common limitation of the existing approaches is that they often fail to reach the parts of the application code that require more complex event sequences.},
  isbn = {978-1-4503-2159-4},
  langid = {english}
}

@inproceedings{karlssonModelbasedAutomatedTesting2021,
  title = {Model-Based {{Automated Testing}} of {{Mobile Applications}}: {{An Industrial Case Study}}},
  shorttitle = {Model-Based {{Automated Testing}} of {{Mobile Applications}}},
  booktitle = {2021 {{IEEE International Conference}} on {{Software Testing}}, {{Verification}} and {{Validation Workshops}} ({{ICSTW}})},
  author = {Karlsson, Stefan and Causevic, Adnan and Sundmark, Daniel and Larsson, Marten},
  year = {2021},
  month = apr,
  pages = {130--137},
  publisher = {IEEE},
  address = {Porto de Galinhas, Brazil},
  doi = {10.1109/ICSTW52544.2021.00033},
  url = {https://ieeexplore.ieee.org/document/9440191/},
  urldate = {2025-04-24},
  copyright = {https://ieeexplore.ieee.org/Xplorehelp/downloads/license-information/IEEE.html},
  isbn = {978-1-6654-4456-9}
}

@inproceedings{kirubakaranMobileApplicationTesting2013,
  title = {Mobile Application Testing --- {{Challenges}} and Solution Approach through Automation},
  booktitle = {2013 {{International Conference}} on {{Pattern Recognition}}, {{Informatics}} and {{Mobile Engineering}}},
  author = {Kirubakaran, B. and Karthikeyani, V.},
  year = {2013},
  month = feb,
  pages = {79--84},
  doi = {10.1109/ICPRIME.2013.6496451},
  url = {https://ieeexplore.ieee.org/document/6496451/},
  urldate = {2025-04-24},
  abstract = {By the time this paper has been presented, the mobile app landscape will have changed. New OS versions will have been released. A bunch of new devices will have hit the market. And mobile application testing will have become that much more complex and challenging for all of us. There is no doubt that mobile applications need specific testing approaches. This paper wants to investigate new directions in research on the type of testing and skills required on mobile app testing by answering the following three research questions: (RQ1) How mobile applications testing are so different from traditional web applications, that require specialized testing skills and techniques?, (RQ2) What are the new challenges and future trends in mobile application testing, and (RQ3) How far automation effective in testing mobile application?. We answer those questions by analyzing the current trends in mobile application development and testing, and by proposing my view on the topic.},
  keywords = {automation,Automation,mobile applications,Mobile communication,Mobile computing,Performance evaluation,Smart phones,software testing,Testing}
}

@misc{LearnTricentisWhat,
  title = {Learn with {{Tricentis}}: {{What}} Is Software Testing?},
  shorttitle = {Learn with {{Tricentis}}},
  journal = {Tricentis},
  url = {https://www.tricentis.com/learn/software-testing/},
  urldate = {2025-05-11},
  abstract = {Learn fundamentals behind several core testing concepts. In this article, explore what software testing is all about such as the categories within it, as well as the benefits.},
  langid = {american}
}

@article{liangContextVirtualizerCloud,
  title = {Context {{Virtualizer}}: {{A Cloud Service}} for {{Automated Large-scale Mobile App Testing}} under {{Real-World Conditions}}},
  author = {Liang, Mike Chieh-Jan and Lane, Nicholas D and Brouwers, Niels and Zhang, Li Lyna and Karlsson, B{\"o}rje F and Liu, Hao and Liu, Yan and Tang, Jun and Shan, Xiang and Chandra, Ranveer and Zhao, Feng},
  langid = {english}
}

@inproceedings{linares-vasquezContinuousEvolutionaryLargeScale2017,
  title = {Continuous, {{Evolutionary}} and {{Large-Scale}}: {{A New Perspective}} for {{Automated Mobile App Testing}}},
  shorttitle = {Continuous, {{Evolutionary}} and {{Large-Scale}}},
  booktitle = {2017 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  author = {{Linares-Vasquez}, Mario and Moran, Kevin and Poshyvanyk, Denys},
  year = {2017},
  month = sep,
  pages = {399--410},
  publisher = {IEEE},
  address = {Shanghai},
  doi = {10.1109/ICSME.2017.27},
  url = {http://ieeexplore.ieee.org/document/8094439/},
  urldate = {2025-04-24},
  isbn = {978-1-5386-0992-7},
  langid = {american}
}

@inproceedings{liuAutomaticTextInput2017,
  title = {Automatic {{Text Input Generation}} for {{Mobile Testing}}},
  booktitle = {2017 {{IEEE}}/{{ACM}} 39th {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  author = {Liu, Peng and Zhang, Xiangyu and Pistoia, Marco and Zheng, Yunhui and Marques, Manoel and Zeng, Lingfei},
  year = {2017},
  month = may,
  pages = {643--653},
  publisher = {IEEE},
  address = {Buenos Aires},
  doi = {10.1109/ICSE.2017.65},
  url = {http://ieeexplore.ieee.org/document/7985701/},
  urldate = {2025-04-24},
  isbn = {978-1-5386-3868-2},
  keywords = {Biological neural networks,Context modeling,Mobile communication,Neurons,Predictive models,Testing,Training}
}

@misc{MichaelFacemire,
  title = {Michael {{Facemire}}},
  journal = {Forrester},
  url = {https://www.forrester.com/blogs/author/michael_facemire/},
  urldate = {2025-05-11},
  langid = {american}
}

@article{MobileApplicationTesting2025,
  title = {Mobile Application Testing},
  year = {2025},
  month = jan,
  journal = {Wikipedia},
  url = {https://en.wikipedia.org/w/index.php?title=Mobile_application_testing&oldid=1272006010},
  urldate = {2025-05-11},
  abstract = {Mobile application testing is a process by which application software developed for handheld mobile devices is tested for its functionality, usability and consistency. Mobile application testing can be an automated or manual type of testing. Mobile applications either come pre-installed or can be installed from mobile software distribution platforms. Global mobile app revenues totaled 69.7 billion USD in 2015, and are predicted to account for US\$188.9 billion by 2020. Bluetooth, GPS, sensors, and Wi-Fi are some of the core technologies at play in wearables. Mobile application testing accordingly focuses on field testing, user focus, and looking at areas where hardware and software need to be tested in unison.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1272006010}
}

@misc{MobileTestAutomation,
  title = {Mobile {{Test Automation}}: {{Everything You Need}} to {{Know}}},
  shorttitle = {Mobile {{Test Automation}}},
  journal = {Tricentis},
  url = {https://www.tricentis.com/learn/mobile-test-automation-a-practical-introduction/},
  urldate = {2025-05-11},
  abstract = {Explore mobile test automation and its benefits. Discover key mobile testing tools for delivering high-quality mobile apps efficiently.},
  langid = {american}
}

@misc{RegressionTesting,
  title = {Regression {{Testing}}},
  journal = {Tricentis},
  url = {https://www.tricentis.com/learn/regression-testing/},
  urldate = {2025-05-11},
  abstract = {Regression testing essentially involves rerunning already-executed test cases to make sure software works as intended. Read about the benefits.},
  langid = {american}
}

@misc{SoftwareTestingWhat,
  title = {Software {{Testing}}: {{What It Is}} and {{How}} to {{Do It Right}} - {{Tricentis}}},
  url = {https://www.tricentis.com/learn/software-testing},
  urldate = {2025-05-11}
}

@article{taoBuildingModelBasedGUI2016,
  title = {Building a {{Model-Based GUI Test Automation System}} for {{Mobile Applications}}},
  author = {Tao, Chuanqi and Gao, Jerry},
  year = {2016},
  month = nov,
  journal = {International Journal of Software Engineering and Knowledge Engineering},
  volume = {26},
  number = {09n10},
  pages = {1605--1615},
  issn = {0218-1940, 1793-6403},
  doi = {10.1142/S0218194016710042},
  url = {https://www.worldscientific.com/doi/abs/10.1142/S0218194016710042},
  urldate = {2025-04-24},
  abstract = {With the rapid advance of mobile computing technology and wireless networking, there is a significant increase of mobile applications (apps). This brings new business requirements and demands in mobile software testing, and causes new issues and challenges in mobile test automation. Existing mobile application testing approaches mostly concentrate on GUI-based testing, load and performance testing without considering large-scale concurrent mobile app test automation, and model-based test coverage analysis. In this paper, a mobile hierarchical GUI model is proposed to present mobile operation scenario flows and gesture features in a hierarchical manner, in order to facilitate test dependency analysis in test automation. Mobile app test coverage analysis is performed based on GUI ripping models. The paper also presents a developed system that provides a test automation solution using GUI models. Finally, the paper reports a case study to indicate the feasibility and effectiveness of the proposed approach.},
  langid = {english}
}

@inproceedings{taoCloudBasedInfrastructureMobile2015,
  title = {Cloud-{{Based Infrastructure}} for {{Mobile Testing}} as a {{Service}}},
  booktitle = {2015 {{Third International Conference}} on {{Advanced Cloud}} and {{Big Data}}},
  author = {Tao, Chuanqi and Gao, Jerry and Li, Bixin},
  year = {2015},
  month = oct,
  pages = {133--140},
  publisher = {IEEE},
  address = {Yangzhou, Jiangsu, China},
  doi = {10.1109/CBD.2015.30},
  url = {http://ieeexplore.ieee.org/document/7435464/},
  urldate = {2025-05-11},
  isbn = {978-1-4673-8537-4}
}

@article{vinaysimhavarmayadavaliAdvancingElementIdentification2024,
  title = {Advancing {{Element Identification}} for {{Web}} and {{Mobile Automation}}},
  author = {{Vinaysimha Varma Yadavali}},
  year = {2024},
  month = aug,
  journal = {International Journal of Advanced Research in Science, Communication and Technology},
  pages = {45--56},
  issn = {2581-9429},
  doi = {10.48175/IJARSCT-6232},
  url = {https://ijarsct.co.in/Paper6232.pdf},
  urldate = {2025-04-24},
  abstract = {Element identification is a cornerstone of automation testing, directly influencing the reliability, scalability, and efficiency of test scripts. With the rapid evolution of web and mobile applications, traditional element identification methods---such as XPath, CSS Selectors, and static attributes---are increasingly challenged by dynamic DOM structures, shadow DOMs, virtual DOMs, and hybrid frameworks. These challenges are further amplified in mobile environments, where gestures, native elements, and platform-specific attributes add layers of complexity. This paper explores the advancements in element identification techniques that address these challenges for both web and mobile automation testing. It presents a comparative analysis of traditional methods and emerging solutions, highlighting their limitations in modern application scenarios. The study introduces hybrid strategies, including context-aware locators, heuristic-based identification, and early implementations of adaptive and self-healing locators. It also examines the role of cross-platform tools like Selenium, Appium, and Cypress in tackling identification issues. Furthermore, the paper emphasizes the importance of unified approaches that bridge web and mobile testing, particularly in hybrid applications with embedded web views. Future trends, such as collaborative tagging standards between development and testing teams, are discussed to provide a forward-looking perspective on overcoming element identification bottlenecks. By addressing key pain points and proposing innovative techniques, this paper aims to guide testers, developers, and tool creators in adopting resilient, scalable, and adaptable element identification strategies that meet the demands of modern software applications.},
  langid = {english}
}
@misc{NumberMobileDevices,
  title = {Number of Mobile Devices Worldwide 2020-2025},
  journal = {Statista},
  url = {https://www.statista.com/statistics/245501/multiple-mobile-device-ownership-worldwide/},
  urldate = {2025-05-15},
  abstract = {In 2021, the number of mobile devices operating worldwide stood at almost 15 billion, up from just over 14 billion in the previous year.},
  langid = {english}
}
@misc{WelcomeAppiumDocumentation,
  title = {Welcome - {{Appium Documentation}}},
  url = {http://appium.io/docs/en/latest/},
  urldate = {2025-05-15},
  langid = {american}
}
@misc{NightwatchV3Nodejs,
  title = {Nightwatch {{V3}} {\textbar} {{Node}}.Js Powered {{End-to-End}} Testing Framework},
  journal = {Nightwatch.js},
  url = {https://nightwatchjs.org/},
  urldate = {2025-05-15},
  abstract = {Write efficient end-to-end tests in Node.js and run them against W3C WebDriver.},
  langid = {english}
}
@misc{Calabash,
  title = {Calabash},
  url = {https://github.com/calabash},
  urldate = {2025-05-15}
}
@misc{XCUITestTutorialDetailed,
  title = {{{XCUITest Tutorial}} -- {{A Detailed Guide On XCUITest Framework}}},
  url = {https://www.lambdatest.com/xcuitest},
  urldate = {2025-05-15},
  abstract = {In this XCUITest tutorial, learn about XCUITest framework and its benefits for mobile automation testing. Take a look at how XCUITest works and see how to use it to test your mobile applications.},
  langid = {american}
}
@misc{SeleniumOverview,
  title = {Selenium {{Overview}}},
  journal = {Selenium},
  url = {https://www.selenium.dev/documentation/overview/},
  urldate = {2025-05-18},
  abstract = {Is Selenium for you? See an overview of the different project components.},
  langid = {english}
}
@misc{SeleniumComponents,
  title = {Selenium Components},
  journal = {Selenium},
  url = {https://www.selenium.dev/documentation/overview/components/},
  urldate = {2025-05-18},
  abstract = {Building a test suite using WebDriver will require you to understand and effectively use several components. As with everything in software, different people use different terms for the same idea. Below is a breakdown of how terms are used in this description. Terminology API: Application Programming Interface. This is the set of ``commands'' you use to manipulate WebDriver. Library: A code module that contains the APIs and the code necessary to implement them.},
  chapter = {documentation},
  langid = {english}
}
